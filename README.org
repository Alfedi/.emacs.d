* My emacs configuration

** Index
   - Packages
     - [[https://github.com/Alfedi/.emacs.d#Melpa][Melpa]]
     - [[https://github.com/Alfedi/.emacs.d#Use-package][Use-package]]
   - Personalization
     - [[https://github.com/Alfedi/.emacs.d#Cleaning][Cleaning]]
     - [[https://github.com/Alfedi/.emacs.d#Rainbow-delimiters][Rainbow-delimiters]]
     - [[https://github.com/Alfedi/.emacs.d#Modeline][Telephone-line]]
     - [[https://github.com/Alfedi/.emacs.d#Theme][Theme]]
   - Move
     - [[https://github.com/Alfedi/.emacs.d#Windmove][Windmove]]
     - [[https://github.com/Alfedi/.emacs.d#Helm][Helm]]
   - Accessories
     - [[https://github.com/Alfedi/.emacs.d#Spotify][Spotify]]
     - [[https://github.com/Alfedi/.emacs.d#Golden-ratio][Golden-ratio]]
     - [[https://github.com/Alfedi/.emacs.d#Neotree][Neotree]]
     - [[https://github.com/Alfedi/.emacs.d#Undo-tree][Undo-tree]]
     - [[https://github.com/Alfedi/.emacs.d#Zone-rainbow][Zone-rainbow]]
     - [[https://github.com/Alfedi/.emacs.d#Magit][Magit]]
     - [[https://github.com/Alfedi/.emacs.d#Multi-term][Multi-term]]

** Packages
*** Melpa
    Where we get our packages.
    #+BEGIN_SRC elisp
    (when (>= emacs-major-version 24)
      (require 'package)
      (add-to-list
        'package-archives
	'("melpa-stable" . "http://melpa-stable.milkbox.net/packages/") t)
      (add-to-list
        'package-archives
        '("melpa" . "http://melpa.org/packages/"))
      (package-initialize))
    #+END_SRC

*** Use-package
    This black magic package allowed us to manage packages easily.
    #+BEGIN_SRC elisp
    (unless (featurep 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (eval-when-compile (require 'use-package))
    #+END_SRC
    
** Personalization
*** Cleaning
   Several changes to clean inteface, display some stuff on modeline and make custom configuration and emacs backups non disturbing.
   #+BEGIN_SRC elisp
   (tooltip-mode -1)
   (tool-bar-mode -1)
   (set-window-fringes nil 0 0)
   (menu-bar-mode -1)
   (scroll-bar-mode -1)
   (setq inhibit-startup-screen t)
   (display-time-mode 1)
   (display-battery-mode 1)
   (electric-pair-mode 1)
   (show-paren-mode 1)
   (setq custom-file "~/.emacs.d/.emacs-custom.el")
   (setq make-backup-files nil)
   (setq backup-directory-alist '(("" . "~/.emacs.d/emacs-backup")))
   #+END_SRC

*** Rainbow-delimiters
    Color most of delimiters to know where they open and close.
    #+BEGIN_SRC elisp
    (use-package rainbow-delimiters
      :ensure t
      :init
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode 1))
    #+END_SRC

*** Modeline
    Highly personalizable modeline and a very cool song [[https://github.com/dbordak/telephone-line]]
    #+BEGIN_SRC elisp
    (use-package telephone-line
    :ensure t)
    (setq telephone-line-subseparator-faces '())
    (setq telephone-line-height 24
          telephone-line-evil-use-short-tag t)
    (telephone-line-mode t)
    #+END_SRC

*** Theme
    I fall in love with doom-themes, no more explain needed. I also like the Hack font.
    #+BEGIN_SRC elisp
    (use-package doom-themes
    :ensure t
    :init (load-theme 'doom-molokai t)
    :config (doom-themes-org-config)
    (doom-themes-neotree-config))
    ;; Font
    (add-to-list 'default-frame-alist '(font . "Hack 10"))
    (set-face-attribute 'default nil :family "Hack 10")
    (set-default-font "Hack 10")
    #+END_SRC

** Move
*** Windmove
    This allowed to move between buffers using ~C-<arrow keys>~.
    #+BEGIN_SRC elisp
    (use-package windmove
    :ensure t
    :bind (("C-<up>" . windmove-up)
           ("C-<down>" . windmove-down)
	   ("C-<right>" . windmove-right)
	   ("C-<left>" . windmove-left)))
    #+END_SRC

*** Helm
    Incredible framework for Emacs.
    #+BEGIN_SRC elisp
    ;; Thanks to @Ironjanowar for helm config
    (use-package helm
    :ensure t
    :init (helm-mode 1)
    :config (require 'helm-config
	     (setq helm-split-window-in-side-p t
	           helm-buffers-fuzzy-matching t 
		   helm-recentf-fuzzy-match t
		   helm-move-to-line-cycle-in-source t)
	     (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action))
    :bind (("C-x C-f" . helm-find-files)
           ("M-x" . helm-M-x)
	   ("C-x b" . helm-mini)
	   ("C-x C-b" . helm-buffers-list)
	   ("C-c g" . helm-google-suggest)))
    #+END_SRC
    
** Accessories
*** Spotify
    Spotify control from emacs.
    #+BEGIN_SRC elisp
    (use-package spotify
    :ensure t
    :bind(("C-S-s p" . spotify-playpause)
          ("C-S-s n" . spotify-next)
	  ("C-S-s b" . spotify-previous)
	  ("C-S-s c" . spotify-current)))
    #+END_SRC

*** Golden-ratio
    Reduce the size of the buffers that you don't use.
    #+BEGIN_SRC elisp
    (use-package golden-ratio
    :ensure t
    :config (golden-ratio-mode t))
    #+END_SRC

*** Neotree
    Cool directory tree visualization. To use it you need ~all-the-icons~ package and execute ~M-x all-the-icons-install-fonts RET~
    #+BEGIN_SRC elisp
    (use-package all-the-icons
    :ensure t)
  
    (use-package neotree
    :ensure t
    :bind (("C-x n" . neotree-toggle)))
    #+END_SRC

*** Undo-tree
    Another tree to know what I did before deleting that line.
    #+BEGIN_SRC elisp
    (use-package undo-tree
    :ensure t
    :config (global-undo-tree-mode t))
    #+END_SRC

*** Zone-rainbow
    Perfect mode to show your code to other people.
    #+BEGIN_SRC elisp
    (use-package zone-rainbow
    :ensure t
    :bind ("C-z" . zone-rainbow))
    #+END_SRC

*** Magit
    Git on emacs!
    #+BEGIN_SRC elisp
    (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
    #+END_SRC


*** Multi-term
    A terminal on emacs
    #+BEGIN_SRC elisp
    (use-package multi-term
    :ensure t)
    #+END_SRC


