* My emacs configuration

** Index
   - Packages
     - [[https://github.com/Alfedi/.emacs.d#Melpa][Melpa]]
     - [[https://github.com/Alfedi/.emacs.d#Use-package][Use-package]]
   - Customization
     - [[https://github.com/Alfedi/.emacs.d#Cleaning][Cleaning]]
     - [[https://github.com/Alfedi/.emacs.d#Rainbow-delimiters][Rainbow-delimiters]]
     - [[https://github.com/Alfedi/.emacs.d#Modeline][Doom-modeline]]
     - [[https://github.com/Alfedi/.emacs.d#Theme][Theme]]
     - [[https://github.com/Alfedi/.emacs.d#Emacs-dashboard][Emacs-dashboard]]
   - Movement
     - [[https://github.com/Alfedi/.emacs.d#Windmove][Windmove]]
     - [[https://github.com/Alfedi/.emacs.d#Helm][Helm]]
   - Accessories
     - [[https://github.com/Alfedi/.emacs.d#Spotify][Spotify]]
     - [[https://github.com/Alfedi/.emacs.d#Golden-ratio][Golden-ratio]]
     - [[https://github.com/Alfedi/.emacs.d#Neotree][Neotree]]
     - [[https://github.com/Alfedi/.emacs.d#Undo-tree][Undo-tree]]
     - [[https://github.com/Alfedi/.emacs.d#Zone-rainbow][Zone-rainbow]]
     - [[https://github.com/Alfedi/.emacs.d#Magit][Magit]]
     - [[https://github.com/Alfedi/.emacs.d#Multi-term][Multi-term]]
     - [[https://github.com/Alfedi/.emacs.d#Sudo-edit][Sudo-edit]]
     - [[https://github.com/Alfedi/.emacs.d#Notes][Notes]]
     - [[https://github.com/Alfedi/.emacs.d#IFWB][IFWB]]
     - [[https://github.com/Alfedi/.emacs.d#Yasnippets][Yasnippets]]
     - [[https://github.com/Alfedi/.emacs.d#Company][Company]]
     - [[https://github.com/Alfedi/.emacs.d#which-key][Which-key]]
     - [[https://github.com/Alfedi/.emacs.d#flycheck][Flycheck]]
   - Programming
     - [[https://github.com/Alfedi/.emacs.d#Elixir-mode][Elixir-mode]]
     - [[https://github.com/alfedi/.emacs.d#lsp][Language Server Protocol]]
       - [[https://github.com/alfedi/.emacs.d#lsp-mode][Lsp-mode]]
       - [[https://github.com/Alfedi/.emacs.d#helm-lsp][Helm-lsp]]
     - [[https://github.com/Alfedi/.emacs.d#projectile][Projectile]]
       - [[https://github.com/Alfedi/.emacs.d#helm-projectile][Helm-projectile]]

** Packages
*** Melpa
    Where we get our packages.
    #+begin_src elisp
    (when (>= emacs-major-version 24)
      (require 'package)
      (add-to-list
        'package-archives
        '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/") t)
      (add-to-list
        'package-archives
        '("melpa" . "http://melpa.org/packages/"))
      (package-initialize))
    #+end_src

*** Use-package
    This black magic package allowed us to manage packages easily.
    #+begin_src elisp
    (unless (featurep 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (eval-when-compile (require 'use-package))
    #+end_src

** Customization
*** Cleaning
    Several changes to clean inteface, display some stuff on modeline and make custom configuration and emacs backups non disturbing.
    #+begin_src elisp
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (set-window-fringes nil 0 0)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (setq inhibit-startup-screen t)
    (electric-pair-mode 1)
    (show-paren-mode 1)
    (setq custom-file "~/.emacs.d/.emacs-custom.el")
    (setq make-backup-files nil)
    (setq auto-save-default nil)
    #+end_src

*** Rainbow-delimiters
    Color most of delimiters to know where they open and close.
    #+begin_src elisp
    (use-package rainbow-delimiters
      :ensure t
      :init
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode 1))
    #+end_src

*** Modeline
    New modeline, it's perfect for doom-themes
    #+begin_src elisp
    (use-package doom-modeline
      :ensure t
      :defer t
      :hook (after-init . doom-modeline-init))

    ;; custom settings
    (setq doom-modeline-height 10)
    (setq doom-modeline-buffer-file-name-style 'truncate-from-project)
    (setq doom-modeline-icon t)
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-minor-modes nil)
    (setq doom-modeline-lsp nil)
    (setq doom-modeline-github t)
    (setq doom-modeline-github-interval (* 30 60))
    (setq find-file-visit-truename t)
    #+end_src

*** Theme
    I fall in love with doom-themes, no more explain needed.
    #+begin_src elisp
    (use-package doom-themes
    :ensure t
    :init (load-theme 'doom-iosvkem t)
    :config (doom-themes-org-config)
    (doom-themes-neotree-config))
    ;; font
    (add-to-list 'default-frame-alist '(font . "Input Mono 10"))
    (set-face-attribute 'default nil :family "Input Mono 10")
    (set-frame-font "Input Mono 10")
    #+end_src

*** Emacs-dashboard
    Customizable Emacs dashboard
    #+BEGIN_SRC elisp
    (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))

    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))) ;; emacs daemon
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-items '((projects . 5)
                            (agenda . 7)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info nil)
    (setq dashboard-set-footer nil)
    #+END_SRC

** Move
*** Windmove
    This allowed to move between buffers using ~c-<arrow keys>~.
    #+begin_src elisp
    (use-package windmove
    :ensure t
    :bind (("c-<up>" . windmove-up)
           ("c-<down>" . windmove-down)
           ("c-<right>" . windmove-right)
           ("c-<left>" . windmove-left)))
    #+end_src

*** Helm
    Incredible framework for emacs.
    #+begin_src elisp
    ;; thanks to @ironjanowar for helm config
    (use-package helm
    :ensure t
    :init (helm-mode 1)
    :config (require 'helm-config
             (setq helm-split-window-in-side-p t
                   helm-buffers-fuzzy-matching t
                   helm-recentf-fuzzy-match t
                   helm-move-to-line-cycle-in-source t)
             (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action))
    :bind (("c-x c-f" . helm-find-files)
           ("m-x" . helm-m-x)
           ("c-x b" . helm-mini)
           ("c-x c-b" . helm-buffers-list)
           ("c-c g" . helm-google-suggest)))
    #+end_src

** Accessories
*** Spotify
    Spotify control from emacs.
    #+begin_src elisp
    (use-package spotify
    :ensure t
    :bind(("c-s-s p" . spotify-playpause)
          ("c-s-s n" . spotify-next)
          ("c-s-s b" . spotify-previous)
          ("c-s-s c" . spotify-current)))
    #+end_src

*** Golden-ratio
    Reduce the size of the buffers that you don't use.
    #+begin_src elisp
    (use-package golden-ratio
    :ensure t
    :config (golden-ratio-mode t))
    #+end_src

*** Neotree
    Cool directory tree visualization. To use it you need ~all-the-icons~ package and execute ~m-x all-the-icons-install-fonts ret~. With ~neo-smart-open~ and [[https://github.com/Alfedi/.emacs.d#projectile][projectile]] the tree is automatically updated.
    #+begin_src elisp
    (use-package all-the-icons
    :ensure t)

    (use-package neotree
    :ensure t
    :bind (("c-x n" . neotree-toggle))
    :config (setq-default neo-show-hidden-files t)
            (setq neo-smart-open t))
    #+end_src

*** Undo-tree
    Another tree to know what i did before deleting that line.
    #+begin_src elisp
    (use-package undo-tree
    :ensure t
    :config (global-undo-tree-mode t))
    #+end_src

*** Magit
    Git on emacs!
    #+begin_src elisp
    (use-package magit
    :ensure t
    :bind ("c-x g" . magit-status))
    #+end_src

*** Notes
    Copied from [[https://github.com/ironjanowar][@ironjanowar]]. use to take quick notes.
    #+begin_src elisp
    (defun new-scratch-buffer-new-window ()
    "create a new scratch buffer in a
    new window. i generally take a lot of notes
    in different topics. for each new topic hit
    c-c c-s and start taking your notes.
    most of these notes don't need to be
    saved but are used like quick post it
    notes."
    (interactive)
    (let (($buf (generate-new-buffer "notes")))
      (split-window-right)
      (other-window 1)
      (balance-windows)
      (switch-to-buffer $buf)
      (org-mode)
      (insert "# notes\n\n")
      $buf))

    (global-set-key
      (kbd "c-c c-n")
      'new-scratch-buffer-new-window)
    (provide 'open-notes)
    #+end_src

*** ifwb
    By [[https://github.com/skgsergio][@skgsergio]]
    #+begin_src elisp
    ;; indent fucking whole buffer (by github.com/skgsergio)
    (defun iwb ()
      "indent whole buffer"
      (interactive)
      (delete-trailing-whitespace)
      (indent-region (point-min) (point-max) nil)
      (untabify (point-min) (point-max))
      (message "indent buffer: done.")
      )

    (global-set-key "\m-i" 'iwb)
    #+end_src

*** Yasnippets
    Emacs package which allows you to use abbreviations for some programming languages functions and also you can create your own.
    #+BEGIN_SRC elisp
    (use-package yasnippet
      :ensure t
      :init (yas-global-mode t)
      :bind ("C-<tab>" . yas-expand))
      (put 'downcase-region 'disabled nil)
      (put 'upcase-region 'disabled nil)

    (use-package yanippet-snippets
      :ensure t)
    #+END_SRC

*** Company
    Auto-completion. I use it with yasnippets.
    #+begin_src elisp
    (use-package company
      :ensure t
      :init (global-company-mode)
      :bind ("c-<tab>" . company-yasnippet))
    #+end_src

*** Which-key
    If you forget some key binding ~which-key~ is your friend.
    #+BEGIN_SRC elisp
     (use-package which-key
     :ensure t
     :config (which-key-mode))
    #+END_SRC

*** Flycheck
    On the fly syntax checking extension. Also extension for Elixir lang.
    #+BEGIN_SRC elisp
     (use-package flycheck
     :ensure t
     :init (global-flycheck-mode t))

     (use-package flycheck-elixir
     :ensure t)
    #+END_SRC

*** Calendar
    ~org-gcal~ and ~calfw~ to setup google calendar support and fancy calendar view. (For privacy reasons I decide not to post my ~org-gcal~ config, you should see their [[https://github.com/myuhe/org-gcal.el][repo]]).
     #+BEGIN_SRC elisp
     (use-package calfw
     :ensure t
     :config (require 'calfw)
     (require 'calfw-org)
     :bind ("C-c c" . cfw:open-org-calendar)
     :init (setq calendar-week-start-day 1)
     (setq calendar-month-name-array
           ["Enero" "Febrero" "Marzo" "Abril" "Mayo" "Junio" "Julio" "Agosto" "Septiembre" "Octubre" "Noviembre" "Diciembre"])
     (setq calendar-day-name-array
           ["Domingo" "Lunes" "Martes" "Miércoles" "Jueves" "Viernes" "Sábado"])
     (setq cfw:display-calendar-holidays nil))
     #+END_SRC

** Programming
*** Elixir-mode
    The hook applies ~elixir-format~ after saving file.
    #+begin_src elisp
    (use-package elixir-mode
      :ensure t)
      ;; apply elixir-format after saving a file
    (add-hook 'elixir-mode-hook
              (lambda () (add-hook 'before-save-hook 'elixir-format nil t)))
    #+end_src

*** LSP
**** LSP-mode
     [[https://github.com/emacs-lsp/lsp-mode][Check out this wonderfull package]]. You need to download the language server in order to make this work. [[https://github.com/emacs-lsp/lsp-mode#supported-languages][Supported languages and their language servers]].
     #+begin_src elisp
     (use-package lsp-mode
     :ensure
     :init (setq lsp-keymap-prefix "c-c l")
     :hook ((python-mode . lsp) ;; pyls (Install with pip)
            (elixir-mode . lsp) ;; elixir-ls (Add language_server.sh to PATH)
            (lsp-mode . lsp-enable-which-key-integration))
     :commands lsp)
     #+end_src

**** LSP-ui
     User interface for lsp package, [[https://github.com/emacs-lsp/lsp-ui][check it out here]]. if you don't want to use ~sideline-mode~ just change the hook.
     #+begin_src elisp
      (use-package lsp-ui
      :ensure t
      :bind ("C-c l i" . lsp-ui-imenu)
      :init (lsp-ui-mode)
            (lsp-ui-doc-mode)
            (setq lsp-ui-doc-delay 1))

      (add-hook 'prog-mode-hook 'lsp-ui-sideline-mode)
     #+END_SRC

**** Helm-LSP
     Helm integration with LSP.
     #+BEGIN_SRC elisp
      (use-package helm-lsp
      :ensure t
      :commands helm-lsp-workspace-symbol)
     #+END_SRC

*** Projectile
    Project management for emacs. [[https://github.com/bbatsov/projectile][Check out the repo here]].
    #+BEGIN_SRC elisp
     (use-package projectile
     :ensure t
     :bind ("C-c p" . projectile-command-map)
     :init (projectile-mode)
           (setq projectile-enable-caching t)
           (setq projectile-indexing-method 'alien)
           (setq projectile-sort-order 'recently-active))

    #+END_SRC
    With the following function and hook, [[http://guake-project.org/][guake terminal]] changes automatically depending on project.
    #+BEGIN_SRC elisp
      (defun open-terminal-in-workdir ()
      "Function to open terminal in the project root."
      (interactive)
      (let ((workdir (if (projectile-project-root)
                         (projectile-project-root)
                       default-directory)))
        (call-process-shell-command
         (concat "guake -e " workdir) nil 0)))

      (add-hook 'projectile-after-switch-project-hook 'open-terminal-in-workdir)
    #+END_SRC

**** Helm-projectile
     Helm integration for projectile.
     #+BEGIN_SRC elisp
      (use-package helm-projectile
      :ensure t
      :init (helm-projectile-on))
     #+END_SRC
